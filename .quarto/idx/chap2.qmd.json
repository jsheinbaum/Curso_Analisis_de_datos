{"title":"Test Reveal Presentations","markdown":{"yaml":{"title":"Test Reveal Presentations","author":"Julio","subtitle":"Testing stuff","format":{"revealjs":{"theme":"solarized","slide-number":true,"chalkboard":true,"buttons":false,"preview-links":"auto","css":"styles.css","footer":"<https://quarto.org>"}}},"headingText":"Empieza","containsRefs":false,"markdown":"\n\n\n- Turn on Math\n- $Ax=b$\n\n- Cauchy-Shwarz\n\n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ \n\n## More Math\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n- A Cross Product Formula\n\n$$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n  \\mathbf{\\hat i} &  \\mathbf{\\hat j} & \\mathbf{\\hat k} \\\\\n  \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n  \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0\n  \\end{vmatrix}  $$\n:::\n\n::: {.column width=\"40%\"}\n- The Lorenz Equations\n$$\n\\begin{aligned}\n  \\dot{x} & = \\sigma(y-x) \\\\\n  \\dot{y} & = \\rho x - y - xz \\\\\n  \\dot{z} & = -\\beta z + xy\n  \\end{aligned}\n$$\n:::\n\n::::\n\n## Julia\n\nExample taken from <https://docs.makie.org/stable/>\n\n```{julia}\n#| echo: true\nusing GLMakie\n\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.01\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x)\n    dy = l.x * (l.ρ - l.z) - l.y\n    dz = l.x * l.y - l.β * l.z\n    l.x += l.dt * dx\n    l.y += l.dt * dy\n    l.z += l.dt * dz\n    Point3f(l.x, l.y, l.z)\nend\n\nattractor = Lorenz()\n\npoints = Observable(Point3f[])\ncolors = Observable(Int[])\n\nset_theme!(theme_black())\n\nfig, ax, l = lines(points, color = colors,\n    colormap = :inferno, transparency = true,\n    axis = (; type = Axis3, protrusions = (0, 0, 0, 0),\n        viewmode = :fit, limits = (-30, 30, -30, 30, 0, 50)))\n\nrecord(fig, \"lorenz.mp4\", 1:120) do frame\n    for i in 1:50\n        push!(points[], step!(attractor))\n        push!(colors[], frame)\n    end\n    ax.azimuth[] = 1.7pi + 0.3 * sin(2pi * frame / 120)\n    notify.((points, colors))\n    l.colorrange = (0, frame)\nend\n```\n## Lorenz Atractor {background-video=\"./lorenz.mp4\"  background-video-loop=\"true\"}\n\n{{< video ./lorenz.mp4  >}}\n\n{{< include _basics_jupyter.qmd >}}\n\n## Python\n\n```{python}\n#| echo: true\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n## GFS Download and Plot\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n```{python}\n#| echo: true \n#| output-location: slide \n\n#| label: xarray plot\n#| fig-cap: \"xarray demo\"\nimport xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nfrom matplotlib.animation import FuncAnimation\nvariables=['u-component_of_wind_height_above_ground','v-component_of_wind_height_above_ground']\ndsw=xr.open_dataset('https://thredds.ucar.edu/thredds/dodsC/grib/NCEP/GFS/Global_0p25deg/Best')[variables]\nfrom datetime import datetime, timedelta\nstarttime=datetime.utcnow()\nstarttime\ninittime = datetime.utcnow().date().isoformat()   ### Simulation startime..\nendtime = starttime + timedelta(days=10)\nfinaltime=endtime.date().isoformat()\nprint(inittime)\nprint(finaltime)\nlat_toplot = np.arange(5, 35.25, 0.25) # last number is exclusive\nlon_toplot = np.arange(260, 310.25, 0.25) # last number is exclusive\ndataw= dsw.sel(time=slice(inittime,finaltime),height_above_ground2=10, lon=lon_toplot, lat=lat_toplot)\nu10=dataw['u-component_of_wind_height_above_ground'].values\nv10=dataw['v-component_of_wind_height_above_ground'].values\nlon=dataw.lon.values\nlat=dataw.lat.values\nl=10\nU10=u10[l,:,:].squeeze()\nV10=v10[l,:,:].squeeze()\nvec_crs = ccrs.RotatedPole(pole_longitude=180.0, pole_latitude=90.0)\n#central_rotated_longitude=0.0)\ndata_crs=ccrs.PlateCarree()\n#print(dataw.time[l])\nfig = plt.figure(figsize=(20, 5))\nax1 = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax1.set_extent([260, 311, 4, 40], crs=ccrs.PlateCarree())\nax1.coastlines()\nmagnitude = (U10 ** 2 + V10 ** 2) ** 0.5\n#magnitude.shape\nax1.streamplot(lon, lat, U10, V10, transform=vec_crs,\n                  linewidth=2, density=2, color=magnitude)\nax1.quiver(lon[::5],lat[::5],U10[::5,::5],V10[::5,::5],scale=200.0,color='b',transform=data_crs)\nplt.savefig('foo.png', bbox_inches='tight')\nplt.show()\n```\n## Plotly\n:::: {.columns}\n\n::: {.column width=\"90%\"}\n```{python}\n#| echo: true\n#| output-location: slide\nimport plotly.express as px\nimport plotly.io as pio\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n```\n::: \n\n::::\n\n\n\n","srcMarkdownNoYaml":"\n\n## Empieza \n\n- Turn on Math\n- $Ax=b$\n\n- Cauchy-Shwarz\n\n$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$ \n\n## More Math\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n- A Cross Product Formula\n\n$$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n  \\mathbf{\\hat i} &  \\mathbf{\\hat j} & \\mathbf{\\hat k} \\\\\n  \\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n  \\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0\n  \\end{vmatrix}  $$\n:::\n\n::: {.column width=\"40%\"}\n- The Lorenz Equations\n$$\n\\begin{aligned}\n  \\dot{x} & = \\sigma(y-x) \\\\\n  \\dot{y} & = \\rho x - y - xz \\\\\n  \\dot{z} & = -\\beta z + xy\n  \\end{aligned}\n$$\n:::\n\n::::\n\n## Julia\n\nExample taken from <https://docs.makie.org/stable/>\n\n```{julia}\n#| echo: true\nusing GLMakie\n\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.01\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x)\n    dy = l.x * (l.ρ - l.z) - l.y\n    dz = l.x * l.y - l.β * l.z\n    l.x += l.dt * dx\n    l.y += l.dt * dy\n    l.z += l.dt * dz\n    Point3f(l.x, l.y, l.z)\nend\n\nattractor = Lorenz()\n\npoints = Observable(Point3f[])\ncolors = Observable(Int[])\n\nset_theme!(theme_black())\n\nfig, ax, l = lines(points, color = colors,\n    colormap = :inferno, transparency = true,\n    axis = (; type = Axis3, protrusions = (0, 0, 0, 0),\n        viewmode = :fit, limits = (-30, 30, -30, 30, 0, 50)))\n\nrecord(fig, \"lorenz.mp4\", 1:120) do frame\n    for i in 1:50\n        push!(points[], step!(attractor))\n        push!(colors[], frame)\n    end\n    ax.azimuth[] = 1.7pi + 0.3 * sin(2pi * frame / 120)\n    notify.((points, colors))\n    l.colorrange = (0, frame)\nend\n```\n## Lorenz Atractor {background-video=\"./lorenz.mp4\"  background-video-loop=\"true\"}\n\n{{< video ./lorenz.mp4  >}}\n\n{{< include _basics_jupyter.qmd >}}\n\n## Python\n\n```{python}\n#| echo: true\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n## GFS Download and Plot\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n```{python}\n#| echo: true \n#| output-location: slide \n\n#| label: xarray plot\n#| fig-cap: \"xarray demo\"\nimport xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nfrom matplotlib.animation import FuncAnimation\nvariables=['u-component_of_wind_height_above_ground','v-component_of_wind_height_above_ground']\ndsw=xr.open_dataset('https://thredds.ucar.edu/thredds/dodsC/grib/NCEP/GFS/Global_0p25deg/Best')[variables]\nfrom datetime import datetime, timedelta\nstarttime=datetime.utcnow()\nstarttime\ninittime = datetime.utcnow().date().isoformat()   ### Simulation startime..\nendtime = starttime + timedelta(days=10)\nfinaltime=endtime.date().isoformat()\nprint(inittime)\nprint(finaltime)\nlat_toplot = np.arange(5, 35.25, 0.25) # last number is exclusive\nlon_toplot = np.arange(260, 310.25, 0.25) # last number is exclusive\ndataw= dsw.sel(time=slice(inittime,finaltime),height_above_ground2=10, lon=lon_toplot, lat=lat_toplot)\nu10=dataw['u-component_of_wind_height_above_ground'].values\nv10=dataw['v-component_of_wind_height_above_ground'].values\nlon=dataw.lon.values\nlat=dataw.lat.values\nl=10\nU10=u10[l,:,:].squeeze()\nV10=v10[l,:,:].squeeze()\nvec_crs = ccrs.RotatedPole(pole_longitude=180.0, pole_latitude=90.0)\n#central_rotated_longitude=0.0)\ndata_crs=ccrs.PlateCarree()\n#print(dataw.time[l])\nfig = plt.figure(figsize=(20, 5))\nax1 = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax1.set_extent([260, 311, 4, 40], crs=ccrs.PlateCarree())\nax1.coastlines()\nmagnitude = (U10 ** 2 + V10 ** 2) ** 0.5\n#magnitude.shape\nax1.streamplot(lon, lat, U10, V10, transform=vec_crs,\n                  linewidth=2, density=2, color=magnitude)\nax1.quiver(lon[::5],lat[::5],U10[::5,::5],V10[::5,::5],scale=200.0,color='b',transform=data_crs)\nplt.savefig('foo.png', bbox_inches='tight')\nplt.show()\n```\n## Plotly\n:::: {.columns}\n\n::: {.column width=\"90%\"}\n```{python}\n#| echo: true\n#| output-location: slide\nimport plotly.express as px\nimport plotly.io as pio\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n```\n::: \n\n::::\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["customs.css"],"output-file":"chap2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":{"light":"cosmo"},"backgroundcolor":"#F5F5F5","title":"Test Reveal Presentations","author":"Julio","subtitle":"Testing stuff"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}